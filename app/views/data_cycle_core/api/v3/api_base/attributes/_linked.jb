# frozen_string_literal: true

json ||= {}
data = content.send(key).includes(:translations, :classifications)

if data.present?

  key_new = definition.dig('api', 'name') || key.camelize(:lower)
  # v1
  json[key_new] = data.map do |item|
    @linked_depth += 1
    linked_json = {}
    if @include_parameters.include?('linked') && @linked_depth < 3
      # @duplicate_linked_in_path ||= []
      # next if @duplicate_linked_in_path.include?(item.id)
      # @duplicate_linked_in_path << item.id
      linked_json = Rails.cache.fetch("api_v3_#{api_cache_key(item, @language, @include_parameters, @mode_parameters, @api_subversion, nil, nil, true, @linked_depth)}", expires_in: 1.year + Random.rand(7.days)) do
        I18n.with_locale(item.first_available_locale(@language)) do
          render 'content_details', content: item
        end
      end
      # @duplicate_linked_in_path.delete(item.id)
    else
      linked_json.merge! render 'content_header', content: item, options: options.merge({ header_type: :linked })
    end
    @linked_depth -= 1
    linked_json
  end

  # v2

  # if @include_parameters.include?('linked')
  #   json[key_new] = render partial: 'content_details', collection: data, as: 'content'
  # else
  #   json[key_new] = render partial: 'content_header', collection: data, as: 'content', locals: {options: options.merge({ header_type: :linked })}
  # end

end
json
