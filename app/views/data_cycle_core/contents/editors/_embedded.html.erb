<%= render 'data_cycle_core/contents/editors/attribute', key: key, definition: definition, value: value, options: options.merge('class' => 'object embedded_object'), content: content, parent: local_assigns[:parent] do %>
  <%= attribute_edit_label_tag(**local_assigns) if DataCycleCore::Feature::PublicationSchedule.includes_attribute_key(content, key) %>
  <% objects = local_assigns[:duplicated_content].to_s == 'true' ? value.presence&.includes(:translations) : value.presence&.includes(:translations)&.page&.per(DataCycleCore.linked_objects_page_size) %>

  <%= tag.div class: 'embedded-object',
      id: "#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id(key)}",
      data: {
        locale: I18n.locale.to_s,
        key: key,
        label: translated_attribute_label(key, definition, content, options),
        definition: definition.to_json,
        options: options.to_json,
        total: value.presence&.size,
        ids: value.presence&.ids,
        per: DataCycleCore.linked_objects_page_size,
        max: definition.dig('validations', 'max') || 0,
        min: definition.dig('validations', 'min') || 0,
        content_id: content.id,
        content_type: content.class.table_name,
        url: thing_path(content),
        write: attribute_editable?(key, definition, options, content),
      }.merge(local_assigns[:no_accordion] ? {} : {
        accordion: local_assigns.dig(:options, 'closable') == false ? nil : true,
        allow_all_closed: true,
        multi_expand: true
      }) do %>
    <% if objects.present? %>
      <% objects.each_with_index do |object, index| %>
        <%= render_embedded_object_partial(key: key,
          definition: definition,
          parameters: {
            object: object,
            index: index,
            options: options,
            new_content: local_assigns[:new_content].to_s == 'true',
            attribute_locale: local_assigns[:attribute_locale],
            duplicated_content: local_assigns[:duplicated_content].to_s == 'true',
            hide_embedded: local_assigns[:hide_embedded].to_s == 'true',
            translate: local_assigns[:translate],
            force_render_child_locales: local_assigns.dig(:force_render_child_locales),
            force_render_locales: object.available_locales
          },
          content: content
        ) %>
      <% end %>
      <% value.presence&.ids&.reject {|v| objects.presence&.ids&.include?(v)}&.each_with_index do |id, index| %>
        <div class="content-object-item hidden" data-id="<%= id %>" id="<%= "#{sanitize_to_id(key)}_item_#{index + objects.size}" %>"><%= hidden_field_tag "#{embedded_key_prefix(key, index + objects.size)}[id]", id %></div>
      <% end %>
    <% else %>
      <%= hidden_field_tag key + '[]', nil, id: "#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id(key)}_default" %>
    <% end %>
    <span class="buttons">
      <%= link_to t('common.load_all', locale: active_ui_locale), load_more_linked_objects_thing_path(
              contextual_content(local_assigns),
              key: key.attribute_name_from_key,
              complete_key: key,
              definition: definition,
              options: options,
              page: params.fetch(:page, 1).to_i + 1,
              hide_embedded: local_assigns[:hide_embedded].to_s == 'true',
              load_more_action: :embedded_object,
              editable: attribute_editable?(key, definition, options, content),
              content_id: content.id,
              content_type: content.class.table_name,
              locale: I18n.locale
            ),
            remote: true,
            id: "load_more_#{content&.id}_#{sanitize_to_id(key)}",
            class: 'load-more-linked-contents button',
            data: {
              disable_with: "<i class='fa fa-spinner fa-spin'></i> #{t('common.load_all', locale: active_ui_locale)}..."
            } if objects.try(:total_pages)&.positive? && !objects&.last_page? %>

      <%= embedded_add_button(id: "add_#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id(key)}", **local_assigns) %>
    </span>
  <% end %>

<% end unless (DataCycleCore::Feature::PublicationSchedule.includes_attribute_key(content, key) && !DataCycleCore::Feature::PublicationSchedule.enabled?) %>
