<% content_for :attribute_group, flush: true do %>
  <% validation_properties = ordered_validation_properties(validation: definition, scope: :edit) %>
  <% validation_properties.presence&.each do |o_key, prop| %>
    <%= render_attribute_editor key: o_key,
                                prefix: "#{local_assigns[:prefix]}#{key.delete_suffix("[#{key.attribute_name_from_key}]")}",
                                definition: prop,
                                value: local_assigns[:parent]&.embedded? ? embedded_attribute_value(content, parent, o_key, prop, local_assigns[:attribute_locale], local_assigns[:translate].to_s == 'true') : contextual_content(local_assigns).try(o_key),
                                parameters: {
                                  options: local_assigns[:options],
                                  parent: local_assigns[:parent],
                                  hide_embedded: local_assigns[:hide_embedded]
                                },
                                content: content %>
  <% end %>
<% end %>

<%
  is_accordion = definition.dig('features', 'collapsible')
  group_title = attribute_group_title(contextual_content(local_assigns), key)
%>

<%= tag.div(class: "attribute-group editor #{'accordion' if is_accordion} #{'has-title' if group_title.present?} #{key.attribute_name_from_key} #{definition['features']&.keys.join(' ')}", data: { allow_all_closed: true, accordion: is_accordion }) do
  tag.div(class: "attribute-group-item #{'accordion-item' if is_accordion} #{'is-active' unless !is_accordion || definition.dig('features', 'collapsed')}", data: { accordion_item: is_accordion }) do
    link_to_if(is_accordion, tag.span(group_title, class: 'attribute-group-title'), '#', class: "attribute-group-title-link #{'accordion-title' if is_accordion}") +
    tag.div(
      safe_join([
        group_title.present? && DataCycleCore::Feature::GeoKeyFigure.allowed_child_attribute_key?(content, definition) ? render('data_cycle_core/contents/editors/features/geo_key_figure_all') : nil
      ].compact),
      class: 'buttons'
    ) +
    tag.div(tag.div(yield_content!(:attribute_group), class: 'attribute-group-content-element'), class: "attribute-group-content #{'accordion-content' if is_accordion}", data: { tab_content: is_accordion })
  end
end if content_for(:attribute_group).present? %>
